#!/bin/bash
#arguments of parameters for metagenomic slurm pipeline

# Initialize variables
NAME=""
PART=""
workdir=$(pwd)/work
metadata=""
treatment=""
ref=""

# Allowed environments
VALID_PART=("epyc" "defq" "epyc_ssd" "epyc -w f02-14" "epyc -w f02-13")

# Validate partition
validate_partition() {
  for valid in "${VALID_PART[@]}"; do
    [[ "$1" == "$valid" ]] && return 0
  done
  return 1
}

# Help message
print_help() {
  echo "Usage: $0 -n [NAME] -p [PARTITION] -m [METADATA] -t [TREATMENT] -r [REFERENCE]"
  echo ""
  echo "Copy your paired end sequence files as .fastq.gz files in the source_data directory. Also"
  echo "cpoy a metadata file into the source_data directory.  An example tab deliminated (.tsv)"
  echo "metadata file is provided.  First column should have sample name, column 2 should be"
  echo "full name forward read and third column the reverse read. Column 4 should be your treatment."
  echo "The treatment column should contain refernce term - avoid all symbols or spaces"
  echo "when creating the descriptions of your sample treatments." 
  echo ""
  echo "  REQUIRED: place an uncompressed genome file into a genome directory ensuring it has suffix .fasta"
  echo "  REQUIRED: place an uncompressed annotation file into a genome directory ensuring it has suffix .gtf"
  echo ""
  echo "Options:"
  echo "  -n, --name          REQUIRED: Run name or deployment name - should be unique"
  echo "  -p, --partition     REQUIRED: Avalible partition / hpc queue (epyc, defq, jumbo, epyc_ssd)"
  echo "  -m, --metadata      REQUIRED: metadata file, tsv col=sample name, col2=read1, col3=read2"
  echo "  -t, --treatment     REQUIRED: treatment for which to derive DEGs"
  echo "  -r, --ref           REQUIRED: reference condition"
  echo "  -w, --work          Optional: working dir - default is current dir /work/"
  echo "  -h, --help          Show this help message"
  exit 0
}

# Use `getopt` to parse options
PARSED=$(getopt -o n:p:m:t:r:w:h --long name:,partition:,metdata:,treatment:,ref:,work:,help -- "$@")
if [[ $? -ne 0 ]]; then
  echo "Failed to parse options." >&2
  exit 1
fi

# Reorganize the positional parameters
eval set -- "$PARSED"

# Process options
while true; do
  case "$1" in
    -n|--name) NAME="$2"; shift 2 ;;
    -w|--work)  workdir="$2"; shift 2 ;;
    -p|--partition) PART="$2"; shift 2 ;;
    -m|--metadata) metadata="$2"; shift 2 ;;
    -t|--treatment) treatment="$2"; shift 2 ;;
    -r|--ref) ref="$2"; shift 2 ;;
    -h|--help) print_help ;;
    --) shift; break ;;
    *) echo "Unexpected option: $1" >&2; exit 1 ;;
  esac
done

# Check if name is set (required)
if [[ -z "$NAME" ]]; then
  echo "Error: -n --name is required - unque run name."
  echo "Use --help for usage."
  exit 1
fi

# Check if partition is set (required)
if [[ -z "$PART" ]]; then
  echo "Error: -p --partition is required - define the partition / hpc queue."
  echo "Use --help for usage."
  exit 1
fi

# Check if partition is set (required)
if [[ -z "$metadata" ]]; then
  echo "Error: -m --metadata file is required - define your metadata."
  echo "Use --help for usage."
  exit 1
fi

# Check if treatment is set (required)
if [[ -z "$treatment" ]]; then
  echo "Error: -t --treatment file is required - define your treatment for DEG analsyis."
  echo "Use --help for usage."
  exit 1
fi

# Check if ref is set (required)
if [[ -z "$ref" ]]; then
  echo "Error: -r --ref file is required - define your reference condition."
  echo "Use --help for usage."
  exit 1
fi

# Validate partition if provided
if [[ -n "$PART" ]] && ! validate_partition "$PART"; then
  echo "Error: Invalid parition '$PART'."
  echo "Allowed partitions: ${VALID_PART[*]}"
  exit 1
fi

# Output arguments
echo "Run name (unique): ${NAME}"
echo "Partition: ${PART}"
echo "Working directory: ${workdir}"
echo "Metadata file: ${metadata}"
echo "Treatment for analysis: ${treatment}"
echo "Reference condition: ${ref}"

#export arguements
export NAME
export PART
export workdir
export metadata
export treatment
export ref
